tempdir = "/media/oohprivet/Storage Disk/Lab/LargeBatch/PhenSimV4/temp"
if (!dir.exists(datadir)) dir.create(datadir, recursive=TRUE)
saveRDS(genBg, file=paste(tempdir, "/genBg_RAW.RData", sep=""))
genBg_shared_scaled <- rescaleVariance(genBg$shared, shared * (1-h2s) *genVar)
genBg_independent_scaled <- rescaleVariance(genBg$independent,
independent * (1-h2s) * genVar)
sep="")
# settings
numOfPeople = 10000
numOfPheno = 1
genVar <- 0.6
noiseVar <- 1 - genVar
totalSNPeffect <- 0.01
h2s <- totalSNPeffect/genVar
phi <- 0.6
rho <- 0.1
delta <- 0.3
shared <- 0.8
independent <- 1 - shared
genBg_shared_scaled <- rescaleVariance(genBg$shared, shared * (1-h2s) *genVar)
genBg_independent_scaled <- rescaleVariance(genBg$independent,
independent * (1-h2s) * genVar)
library(PhenotypeSimulator)
# directories
indir <- "/media/oohprivet/Storage Disk/Lab/LargeBatch" # genotypes dir
datadir <- "/media/oohprivet/Storage Disk/Lab/LargeBatch/Test2" # where phen data is saved
if (!dir.exists(datadir)) dir.create(datadir, recursive=TRUE)
kinshipfile <- paste(indir, "/genotypes_genome_hapgen.controls.grm.rel",
sep="")
genoFilePrefix <- paste(indir, "/genotypes_", sep="")
genoFileSuffix <- "_hapgen.controls.gen"
# Simulation settings
numOfPeople = 100000
numOfSNPs = 499400 # 22 chr*22700 snps/chr
numOfPheno = 1
chrs = 1:22
# genetic effects
genVar <- 0.6
totalSNPeffect <- 0.5 # infinitesimal effect = genVar - totalSNPeffect = 0.1
h2s <- totalSNPeffect/genVar
theta = 0 # proportion of SNPs all traits will share
# non-genetic effect
phi = 0.25 # experimental noise contribution -> Y_noiseBG
delta = 0.75 # non-genetic covariates -> Y_noiseFixed
rho = 0 # correlated non-genetic -> Y_correlatedBg
geneticFixedEffects <- function(X_causal, P, N, phenoID="Trait_",
id_samples = rownames(X_causal),
id_phenos = NULL,
pTraitsAffected=1,
pIndependentGenetic=0.4,
pTraitIndependentGenetic=0.2,
keepSameIndependent=FALSE,
distBeta="norm", mBeta=0, sdBeta=1,
verbose=FALSE) {
numbers <- list(P=P, N=N, mBeta=mBeta, sdBeta=sdBeta,
pIndependentGenetic=pIndependentGenetic,
pTraitIndependentGenetic=pTraitIndependentGenetic,
pTraitsAffected=pTraitsAffected)
positives <- list(P=P, N=N, sdBeta=sdBeta)
proportions <- list(pIndependentGenetic=pIndependentGenetic,
pTraitIndependentGenetic=pTraitIndependentGenetic,
pTraitsAffected=pTraitsAffected)
testNumerics(numbers=numbers, positives=positives, proportions=proportions)
if (!is.numeric(X_causal)) {
stop("Genetic variant matrix to simulate genetic variant effects from is
not numeric. Check your genotype simulation or the parameters
specified for reading the genotypes from file. Did you provide the
correct format information?")
}
if (nrow(X_causal) != N){
stop("Number of samples in SNP matrix (", nrow(X_causal), ") is
different from number of samples to be simulated")
}
if (length(id_samples) !=  nrow(X_causal)) {
stop("Length of id_samples (", length(id_samples), ") is different ",
"from number of samples in X_causal (", nrow(X_causal), "). Does ",
"your X_causal have rownames (default to retrieve id_samples if ",
"not provided)?")
}
if (!(is.character(phenoID) && length(phenoID) == 1)) {
stop("phenoID has to be of length 1 and of type character")
}
if (!is.null(id_phenos) && length(id_phenos) !=  P) {
stop("Length of id_phenos (", length(id_phenos), ") is different ",
"from P (", P, ")")
}
if (is.null(id_phenos)) id_phenos <- paste(phenoID, 1:P, sep="")
NrCausalSNPs <- ncol(X_causal)
traitsAffected <- ceiling(P*pTraitsAffected)
NrIndependentSNPs <- round(pIndependentGenetic * NrCausalSNPs)
NrSharedSNPs <- NrCausalSNPs - NrIndependentSNPs
vmessage(c("Out of", P, "total phenotypes,", traitsAffected, "traits will",
"be affected by genetic variant effects"), verbose=verbose)
if (traitsAffected == 1 && NrIndependentSNPs != 0) {
vmessage(c("The total number of traits affected by genetic variant",
"effects is 1, so pTraitIndependentGenetic",
" will automatically be set to 1."), verbose=verbose)
pTraitIndependentGenetic <- 1
}
if (NrIndependentSNPs != 0) {
vmessage(c("Out of these affected traits (", traitsAffected, "), ",
ceiling(pTraitIndependentGenetic * traitsAffected),
" trait(s)",
" will have independent genetic variant effects"), sep="",
verbose=verbose)
}
Gshared <- NULL
Gindependent <- NULL
if (NrSharedSNPs != 0) {
if (NrIndependentSNPs != 0) {
shared <- sample(c(rep(TRUE, NrSharedSNPs),
rep(FALSE, NrIndependentSNPs)),
replace=FALSE)
X_shared <-  X_causal[,shared]
snpIDshared <- colnames(X_causal)[shared]
} else {
X_shared <- X_causal
snpIDshared <- colnames(X_causal)
}
if (distBeta == "unif") {
betaX_exp <- rexp(NrSharedSNPs) %*% t(rexp(traitsAffected))
## transfrom to uniform with mean=m, with m*x=0.5
betaX_unif <- exp(-betaX_exp/mean(betaX_exp))
multiplicative = 2*sdBeta/(max(betaX_unif)-min(betaX_unif))
additive = mBeta + sdBeta - multiplicative * max(betaX_unif)
betaX_shared  = multiplicative * betaX_unif + additive
}
if (distBeta == "norm") {
betaX_shared <- simulateDist(NrSharedSNPs,  dist=distBeta,
m=mBeta, std=sdBeta) %*%
t(abs(simulateDist(traitsAffected, dist=distBeta, m=0,
std=1)))
}
if (P != traitsAffected) {
betaX_shared <- cbind(betaX_shared,
matrix(0, ncol=P-traitsAffected,
nrow=NrSharedSNPs))
}
rownames(betaX_shared) <- paste("sharedEffect",
1:nrow(betaX_shared), sep="")
cov <- data.frame(X_shared)
colnames(cov) <- snpIDshared
rownames(cov) <- id_samples
cov_effect <- data.frame(t(betaX_shared))
colnames(cov_effect) <- paste(rownames(betaX_shared), "_",
colnames(cov), sep="")
rownames(cov_effect) <- id_phenos
Gshared = X_shared %*% betaX_shared
colnames(Gshared) <- id_phenos
rownames(Gshared) <- id_samples
}
if (NrIndependentSNPs != 0) {
if (NrSharedSNPs != 0) {
independent <- !shared
X_independent <- X_causal[,independent]
snpIDindependent <- colnames(X_causal)[independent]
} else {
X_independent <- X_causal
snpIDindependent <- colnames(X_causal)
}
betaX_independent <- matrix(simulateDist(traitsAffected *
NrIndependentSNPs,
dist=distBeta,
m=mBeta, std=sdBeta),
ncol=traitsAffected)
TraitIndependentGenetic <- ceiling(pTraitIndependentGenetic *
traitsAffected)
if (keepSameIndependent) {
p_nongenetic <- sample(
c(rep(FALSE, TraitIndependentGenetic),
rep(TRUE, (traitsAffected - TraitIndependentGenetic))),
replace=FALSE)
p_nongenetic <- matrix(rep(p_nongenetic, NrIndependentSNPs),
NrIndependentSNPs, byrow = TRUE)
} else {
p_nongenetic <- t(sapply(1:ncol(X_independent), function(x) {
sample(c(rep(FALSE, TraitIndependentGenetic),
rep(TRUE, (traitsAffected - TraitIndependentGenetic))),
replace=FALSE)
}))
}
betaX_independent[p_nongenetic] <- 0
if (P != traitsAffected) {
betaX_independent <- cbind(betaX_independent,
matrix(0, ncol=P-traitsAffected,
nrow=NrIndependentSNPs))
}
rownames(betaX_independent) <- paste("independentEffect",
1:nrow(betaX_independent), sep="")
cov <- data.frame(X_independent)
colnames(cov) <- snpIDindependent
rownames(cov) <- id_samples
cov_effect <- data.frame(t(betaX_independent))
colnames(cov_effect) <- paste(rownames(betaX_independent), "_",
colnames(cov), sep="")
rownames(cov_effect) <- id_phenos
Gindependent = X_independent %*% betaX_independent
colnames(Gindependent) <- id_phenos
rownames(Gindependent) <- id_samples
}
if (NrSharedSNPs != 0 && NrIndependentSNPs != 0) {
cov = cbind(X_shared, X_independent)
colnames(cov) <- c( snpIDshared, snpIDindependent)
cov_effect = data.frame(betaX_shared=t(betaX_shared),
betaX_independent=t(betaX_independent))
colnames(cov_effect) <- paste(colnames(cov_effect), "_",
colnames(cov), sep="")
rownames(cov_effect) <- id_phenos
}
return(list(shared=Gshared*Gshared,
independent=Gindependent*Gindependent,
cov=as.matrix(cov),
cov_effect=as.matrix(cov_effect)))
}
# simulate phenotype with one phenotype component
simulation <- runSimulation(N = numOfPeople, P = numOfPheno, cNrSNP=numOfSNPs,
format = "oxgen",
genoFilePrefix = genoFilePrefix,
genoFileSuffix = genoFileSuffix,
genoDelimiter = " ",
chr = chrs, theta=theta,
# genetic effects:
genVar = genVar, h2s = h2s,
## genetic effects distribution parameters
mBetaGenetic = 0, sdBetaGenetic = 0.2,
# noise effects:
phi = phi, delta = delta,
## non-genetic covariate simulation
NrFixedEffects = 3, NrConfounders = c(1, 1, 1),
distConfounders = c("bin", "cat_unif", "norm"),
probConfounders = 0.2, catConfounders = c(3),
## kinship info
kinshipfile = kinshipfile,
kinshipDelimiter="\t",
kinshipHeader=FALSE,
verbose = TRUE, seed=43)
outdirectory <- savePheno(simulation, directory = datadir,
format=c("csv", "plink"),
saveIntermediate=TRUE)
datadir <- "/media/oohprivet/Storage Disk/Lab/LargeBatch/Test2" # where phen data is saved
if (!dir.exists(datadir)) dir.create(datadir, recursive=TRUE)
kinshipfile <- paste(indir, "/genotypes_genome_hapgen.controls.grm.rel",
sep="")
genoFilePrefix <- paste(indir, "/genotypes_", sep="")
genoFileSuffix <- "_hapgen.controls.gen"
# Simulation settings
numOfPeople = 10000
numOfSNPs = 44 # 22 chr*22700 snps/chr
numOfPheno = 1
chrs = 1:22
# genetic effects
genVar <- 0.6
totalSNPeffect <- 0.5 # infinitesimal effect = genVar - totalSNPeffect = 0.1
h2s <- totalSNPeffect/genVar
theta = 0 # proportion of SNPs all traits will share
# non-genetic effect
phi = 0.25 # experimental noise contribution -> Y_noiseBG
delta = 0.75 # non-genetic covariates -> Y_noiseFixed
rho = 0 # correlated non-genetic -> Y_correlatedBg
geneticFixedEffects <- function(X_causal, P, N, phenoID="Trait_",
id_samples = rownames(X_causal),
id_phenos = NULL,
pTraitsAffected=1,
pIndependentGenetic=0.4,
pTraitIndependentGenetic=0.2,
keepSameIndependent=FALSE,
distBeta="norm", mBeta=0, sdBeta=1,
verbose=FALSE) {
numbers <- list(P=P, N=N, mBeta=mBeta, sdBeta=sdBeta,
pIndependentGenetic=pIndependentGenetic,
pTraitIndependentGenetic=pTraitIndependentGenetic,
pTraitsAffected=pTraitsAffected)
positives <- list(P=P, N=N, sdBeta=sdBeta)
proportions <- list(pIndependentGenetic=pIndependentGenetic,
pTraitIndependentGenetic=pTraitIndependentGenetic,
pTraitsAffected=pTraitsAffected)
testNumerics(numbers=numbers, positives=positives, proportions=proportions)
if (!is.numeric(X_causal)) {
stop("Genetic variant matrix to simulate genetic variant effects from is
not numeric. Check your genotype simulation or the parameters
specified for reading the genotypes from file. Did you provide the
correct format information?")
}
if (nrow(X_causal) != N){
stop("Number of samples in SNP matrix (", nrow(X_causal), ") is
different from number of samples to be simulated")
}
if (length(id_samples) !=  nrow(X_causal)) {
stop("Length of id_samples (", length(id_samples), ") is different ",
"from number of samples in X_causal (", nrow(X_causal), "). Does ",
"your X_causal have rownames (default to retrieve id_samples if ",
"not provided)?")
}
if (!(is.character(phenoID) && length(phenoID) == 1)) {
stop("phenoID has to be of length 1 and of type character")
}
if (!is.null(id_phenos) && length(id_phenos) !=  P) {
stop("Length of id_phenos (", length(id_phenos), ") is different ",
"from P (", P, ")")
}
if (is.null(id_phenos)) id_phenos <- paste(phenoID, 1:P, sep="")
NrCausalSNPs <- ncol(X_causal)
traitsAffected <- ceiling(P*pTraitsAffected)
NrIndependentSNPs <- round(pIndependentGenetic * NrCausalSNPs)
NrSharedSNPs <- NrCausalSNPs - NrIndependentSNPs
vmessage(c("Out of", P, "total phenotypes,", traitsAffected, "traits will",
"be affected by genetic variant effects"), verbose=verbose)
if (traitsAffected == 1 && NrIndependentSNPs != 0) {
vmessage(c("The total number of traits affected by genetic variant",
"effects is 1, so pTraitIndependentGenetic",
" will automatically be set to 1."), verbose=verbose)
pTraitIndependentGenetic <- 1
}
if (NrIndependentSNPs != 0) {
vmessage(c("Out of these affected traits (", traitsAffected, "), ",
ceiling(pTraitIndependentGenetic * traitsAffected),
" trait(s)",
" will have independent genetic variant effects"), sep="",
verbose=verbose)
}
Gshared <- NULL
Gindependent <- NULL
if (NrSharedSNPs != 0) {
if (NrIndependentSNPs != 0) {
shared <- sample(c(rep(TRUE, NrSharedSNPs),
rep(FALSE, NrIndependentSNPs)),
replace=FALSE)
X_shared <-  X_causal[,shared]
snpIDshared <- colnames(X_causal)[shared]
} else {
X_shared <- X_causal
snpIDshared <- colnames(X_causal)
}
if (distBeta == "unif") {
betaX_exp <- rexp(NrSharedSNPs) %*% t(rexp(traitsAffected))
## transfrom to uniform with mean=m, with m*x=0.5
betaX_unif <- exp(-betaX_exp/mean(betaX_exp))
multiplicative = 2*sdBeta/(max(betaX_unif)-min(betaX_unif))
additive = mBeta + sdBeta - multiplicative * max(betaX_unif)
betaX_shared  = multiplicative * betaX_unif + additive
}
if (distBeta == "norm") {
betaX_shared <- simulateDist(NrSharedSNPs,  dist=distBeta,
m=mBeta, std=sdBeta) %*%
t(abs(simulateDist(traitsAffected, dist=distBeta, m=0,
std=1)))
}
if (P != traitsAffected) {
betaX_shared <- cbind(betaX_shared,
matrix(0, ncol=P-traitsAffected,
nrow=NrSharedSNPs))
}
rownames(betaX_shared) <- paste("sharedEffect",
1:nrow(betaX_shared), sep="")
cov <- data.frame(X_shared)
colnames(cov) <- snpIDshared
rownames(cov) <- id_samples
cov_effect <- data.frame(t(betaX_shared))
colnames(cov_effect) <- paste(rownames(betaX_shared), "_",
colnames(cov), sep="")
rownames(cov_effect) <- id_phenos
Gshared = X_shared %*% betaX_shared
colnames(Gshared) <- id_phenos
rownames(Gshared) <- id_samples
}
if (NrIndependentSNPs != 0) {
if (NrSharedSNPs != 0) {
independent <- !shared
X_independent <- X_causal[,independent]
snpIDindependent <- colnames(X_causal)[independent]
} else {
X_independent <- X_causal
snpIDindependent <- colnames(X_causal)
}
betaX_independent <- matrix(simulateDist(traitsAffected *
NrIndependentSNPs,
dist=distBeta,
m=mBeta, std=sdBeta),
ncol=traitsAffected)
TraitIndependentGenetic <- ceiling(pTraitIndependentGenetic *
traitsAffected)
if (keepSameIndependent) {
p_nongenetic <- sample(
c(rep(FALSE, TraitIndependentGenetic),
rep(TRUE, (traitsAffected - TraitIndependentGenetic))),
replace=FALSE)
p_nongenetic <- matrix(rep(p_nongenetic, NrIndependentSNPs),
NrIndependentSNPs, byrow = TRUE)
} else {
p_nongenetic <- t(sapply(1:ncol(X_independent), function(x) {
sample(c(rep(FALSE, TraitIndependentGenetic),
rep(TRUE, (traitsAffected - TraitIndependentGenetic))),
replace=FALSE)
}))
}
betaX_independent[p_nongenetic] <- 0
if (P != traitsAffected) {
betaX_independent <- cbind(betaX_independent,
matrix(0, ncol=P-traitsAffected,
nrow=NrIndependentSNPs))
}
rownames(betaX_independent) <- paste("independentEffect",
1:nrow(betaX_independent), sep="")
cov <- data.frame(X_independent)
colnames(cov) <- snpIDindependent
rownames(cov) <- id_samples
cov_effect <- data.frame(t(betaX_independent))
colnames(cov_effect) <- paste(rownames(betaX_independent), "_",
colnames(cov), sep="")
rownames(cov_effect) <- id_phenos
Gindependent = X_independent %*% betaX_independent
colnames(Gindependent) <- id_phenos
rownames(Gindependent) <- id_samples
}
if (NrSharedSNPs != 0 && NrIndependentSNPs != 0) {
cov = cbind(X_shared, X_independent)
colnames(cov) <- c( snpIDshared, snpIDindependent)
cov_effect = data.frame(betaX_shared=t(betaX_shared),
betaX_independent=t(betaX_independent))
colnames(cov_effect) <- paste(colnames(cov_effect), "_",
colnames(cov), sep="")
rownames(cov_effect) <- id_phenos
}
return(list(shared=Gshared*Gshared,
independent=Gindependent*Gindependent,
cov=as.matrix(cov),
cov_effect=as.matrix(cov_effect)))
}
# simulate phenotype with one phenotype component
simulation <- runSimulation(N = numOfPeople, P = numOfPheno, cNrSNP=numOfSNPs,
format = "oxgen",
genoFilePrefix = genoFilePrefix,
genoFileSuffix = genoFileSuffix,
genoDelimiter = " ",
chr = chrs, theta=theta,
# genetic effects:
genVar = genVar, h2s = h2s,
## genetic effects distribution parameters
mBetaGenetic = 0, sdBetaGenetic = 0.2,
# noise effects:
phi = phi, delta = delta,
## non-genetic covariate simulation
NrFixedEffects = 3, NrConfounders = c(1, 1, 1),
distConfounders = c("bin", "cat_unif", "norm"),
probConfounders = 0.2, catConfounders = c(3),
## kinship info
kinshipfile = kinshipfile,
kinshipDelimiter="\t",
kinshipHeader=FALSE,
verbose = TRUE, seed=43)
outdirectory <- savePheno(simulation, directory = datadir,
format=c("csv", "plink"),
saveIntermediate=TRUE)
library(PhenotypeSimulator)
# directories
#indir <- "/mnt/jack-5/vperelygin/data/GenSim/Hapgen_b36/100k" # genotypes dir
#datadir <- "/mnt/jack-5/vperelygin/data/GenSim/Hapgen_b36/100k/PhenSim" # where phen data is saved
indir <- "/media/oohprivet/Storage Disk/Lab/LargeBatch" # genotypes dir
datadir <- "/media/oohprivet/Storage Disk/Lab/LargeBatch/PhenSimV4" # genotypes dir
if (!dir.exists(datadir)) dir.create(datadir, recursive=TRUE)
tempdir = "/media/oohprivet/Storage Disk/Lab/LargeBatch/PhenSimV4/temp"
if (!dir.exists(datadir)) dir.create(datadir, recursive=TRUE)
# import utility functions for "geneticFixedEffects"
source("./untils/utilityFunctions.R")
# import utility functions for "geneticFixedEffects"
source("/utils/utilityFunctions.R")
source("./utils/utilityFunctions.R")
library(PhenotypeSimulator)
source("./utils/utilityFunctions.R")
source("./utils/PhenSim_Config.R")
gc()
gc()
library(PhenotypeSimulator)
source("./utils/utilityFunctions.R")
source("./utils/PhenSim_Config.R")
# 1. simulate genetic variant effects
causalSNPs <- getCausalSNPs(N=numOfPeople, NrCausalSNPs = numOfSNPs, chr = chrs,
genoFilePrefix = genoFilePrefix,
genoFileSuffix = genoFileSuffix,
delimiter = " ", format = "oxgen",
verbose = TRUE)
genFixed <- geneticFixedEffects(N = numOfPeople, P = numOfPheno,
X_causal = causalSNPs,
pIndependentGenetic = independent,
distBeta = "norm", mBeta = 0, sdBeta = 1,
verbose = TRUE)
## ADD non-linearity
genFixed$independent <- genFixed$independent^2
library(PhenotypeSimulator)
source("./utils/utilityFunctions.R")
source("./utils/PhenSim_Config.R")
library(PhenotypeSimulator)
source("./utils/utilityFunctions.R")
source("./utils/PhenSim_Config.R")
library(PhenotypeSimulator)
source("./utils/utilityFunctions.R")
source("./utils/PhenSim_Config.R")
# 1. simulate genetic variant effects
causalSNPs <- getCausalSNPs(N=numOfPeople, NrCausalSNPs = numOfSNPs, chr = chrs,
genoFilePrefix = genoFilePrefix,
genoFileSuffix = genoFileSuffix,
delimiter = " ", format = "oxgen",
verbose = TRUE)
genFixed <- geneticFixedEffects(N = numOfPeople, P = numOfPheno,
X_causal = causalSNPs,
pIndependentGenetic = independent,
distBeta = "norm", mBeta = 0, sdBeta = 1,
verbose = TRUE)
## ADD non-linearity
genFixed$independent <- genFixed$independent^2
saveRDS(genFixed, file=paste(tempdir, "/genFixed_200k_RAW.RData", sep=""))
# readRDS(paste(tempdir, "/genFixed_RAW.RData", sep="")) - to load the file
